name: Build and Publish ESP8266 Firmware

permissions:
  contents: write
  pages: write
  id-token: write

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Arduino CLI
        uses: arduino/setup-arduino-cli@v1

      - name: Install ESP8266 core 3.1.2
        run: |
          arduino-cli config init
          arduino-cli config set library.enable_unsafe_install true
          arduino-cli config add board_manager.additional_urls https://arduino.esp8266.com/stable/package_esp8266com_index.json
          arduino-cli core update-index
          arduino-cli core install esp8266:esp8266@3.1.2
          

      - name: Install libraries
        run: |
          arduino-cli lib update-index
          arduino-cli lib install "ArduinoJson@7.2.0"
          arduino-cli lib install "arduinoWebSockets@2.7.1"

      - name: Get highest tag and increment
        id: version
        run: |
          # Lista todas as tags (em ordem de criação decrescente)
          all_tags=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${GITHUB_REPOSITORY}/tags?per_page=100 | jq -r '.[].name')

          echo "Tags encontradas:"
          echo "$all_tags"

          # Pega a maior versão numérica (ignora o 'v')
          last_tag=$(echo "$all_tags" | grep -E '^v[0-9]+$' | sed 's/v//' | sort -n | tail -1)
          echo "Última tag numérica: v$last_tag"

          # Incrementa versão
          new_version=$((last_tag + 1))
          new_tag="v${new_version}"

          echo "Nova tag: $new_tag"
          echo "new_tag=$new_tag" >> $GITHUB_ENV



      - name: Generate secrets.h
        run: |
          echo '#ifndef SECRETS_H' > secrets.h
          echo '#define SECRETS_H' >> secrets.h
          echo '' >> secrets.h

          echo 'const char* ssid = "${{ secrets.WIFI_SSID }}";' >> secrets.h
          echo 'const char* password = "${{ secrets.WIFI_PASS }}";' >> secrets.h
          echo 'const char* github_api = "${{ secrets.GH_RELEASES }}";' >> secrets.h
          echo "const char* firmware_version = \"$new_tag\";" >> secrets.h

          echo 'const char* CF_TOKEN = "${{ secrets.CF_TOKEN }}";' >> secrets.h
          echo 'const char* CF_ZONE = "${{ secrets.CF_ZONE }}";' >> secrets.h
          echo 'const char* CF_RECORD = "${{ secrets.CF_RECORD }}";' >> secrets.h
          echo 'const char* CF_HOST = "${{ secrets.CF_HOST }}";' >> secrets.h

          echo '' >> secrets.h
          echo '#endif' >> secrets.h

      - name: Get crypto.h
        run: |
          echo "${{ secrets.CRYPTO_H }}" | base64 --decode > crypto.h

      - name: List available ESP8266 boards
        run: arduino-cli board listall esp8266

      - name: Compile firmware (ESP-01 1MB)
        run: |
          arduino-cli compile \
            --fqbn esp8266:esp8266:generic:eesz=1M64 \
            --build-property build.flags.optimize.lto=true \
            --build-property build.flags.optimize.size=true \
            --output-dir build

      - name: Encrypt firmware
        run: |
          BIN_FILE=$(ls build/*.bin)
          ENCRYPTED_BIN="build/firmware_encrypted.bin"
          echo "${{ secrets.ENCRYPT_SCRIPT }}" | base64 --decode > encrypt_firmware.py
          chmod +x encrypt_firmware.py
          python3 encrypt_firmware.py "$BIN_FILE" "$ENCRYPTED_BIN" "${{ secrets.ENCRYPT_TOKEN }}"
          mv "$ENCRYPTED_BIN" build/firmware.bin


      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: firmware-bin
          path: build/firmware.bin

      - name: Create GitHub Release and upload firmware
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ github.run_number }}
          name: ESP8266 Firmware Build ${{ github.run_number }}
          files: build/firmware.bin
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.GHR_TOKEN }}
